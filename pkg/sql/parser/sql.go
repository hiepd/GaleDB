// Code generated by goyacc -l -o sql.go sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

func setParseTree(yylex yyLexer, stmt Statement) {
	yylex.(*Lexer).ParseTree = stmt
}

type yySymType struct {
	yys       int
	str       string
	statement Statement
}

const LEX_ERROR = 57346
const NAME = 57347
const STRING = 57348
const INTNUM = 57349
const APPROXNUM = 57350
const OR = 57351
const AND = 57352
const NOT = 57353
const ASTERISK = 57354
const ALL = 57355
const AMMSC = 57356
const ANY = 57357
const ASC = 57358
const AS = 57359
const AUTHORIZATION = 57360
const AVG = 57361
const BETWEEN = 57362
const BY = 57363
const CHARACTER = 57364
const CHECK = 57365
const CLOSE = 57366
const COMMIT = 57367
const CONTINUE = 57368
const CREATE = 57369
const CURRENT = 57370
const CURSOR = 57371
const DECIMAL = 57372
const DECLARE = 57373
const DEFAULT = 57374
const DELETE = 57375
const DESC = 57376
const DISTINCT = 57377
const DOUBLE = 57378
const ESCAPE = 57379
const EXISTS = 57380
const FETCH = 57381
const FLOAT = 57382
const FOR = 57383
const FOREIGN = 57384
const FOUND = 57385
const FROM = 57386
const GOTO = 57387
const GRANT = 57388
const GROUP = 57389
const HAVING = 57390
const IN = 57391
const INDICATOR = 57392
const INSERT = 57393
const INTEGER = 57394
const INTO = 57395
const IS = 57396
const MIN = 57397
const MAX = 57398
const KEY = 57399
const LANGUAGE = 57400
const LIKE = 57401
const NULLX = 57402
const NUMERIC = 57403
const OF = 57404
const ON = 57405
const OPEN = 57406
const OPTION = 57407
const ORDER = 57408
const PARAMETER = 57409
const PRECISION = 57410
const PRIMARY = 57411
const PRIVILEGES = 57412
const PROCEDURE = 57413
const PUBLIC = 57414
const REAL = 57415
const REFERENCES = 57416
const ROLLBACK = 57417
const SCHEMA = 57418
const SELECT = 57419
const SET = 57420
const SMALLINT = 57421
const SOME = 57422
const SQLCODE = 57423
const SQLERROR = 57424
const SUM = 57425
const TABLE = 57426
const TO = 57427
const UNION = 57428
const UNIQUE = 57429
const UPDATE = 57430
const USER = 57431
const VALUES = 57432
const VIEW = 57433
const WHENEVER = 57434
const WHERE = 57435
const WITH = 57436
const WORK = 57437

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"NAME",
	"STRING",
	"INTNUM",
	"APPROXNUM",
	"OR",
	"AND",
	"NOT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'.'",
	"ASTERISK",
	"ALL",
	"AMMSC",
	"ANY",
	"ASC",
	"AS",
	"AUTHORIZATION",
	"AVG",
	"BETWEEN",
	"BY",
	"CHARACTER",
	"CHECK",
	"CLOSE",
	"COMMIT",
	"CONTINUE",
	"CREATE",
	"CURRENT",
	"CURSOR",
	"DECIMAL",
	"DECLARE",
	"DEFAULT",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DOUBLE",
	"ESCAPE",
	"EXISTS",
	"FETCH",
	"FLOAT",
	"FOR",
	"FOREIGN",
	"FOUND",
	"FROM",
	"GOTO",
	"GRANT",
	"GROUP",
	"HAVING",
	"IN",
	"INDICATOR",
	"INSERT",
	"INTEGER",
	"INTO",
	"IS",
	"MIN",
	"MAX",
	"KEY",
	"LANGUAGE",
	"LIKE",
	"NULLX",
	"NUMERIC",
	"OF",
	"ON",
	"OPEN",
	"OPTION",
	"ORDER",
	"PARAMETER",
	"PRECISION",
	"PRIMARY",
	"PRIVILEGES",
	"PROCEDURE",
	"PUBLIC",
	"REAL",
	"REFERENCES",
	"ROLLBACK",
	"SCHEMA",
	"SELECT",
	"SET",
	"SMALLINT",
	"SOME",
	"SQLCODE",
	"SQLERROR",
	"SUM",
	"TABLE",
	"TO",
	"UNION",
	"UNIQUE",
	"UPDATE",
	"USER",
	"VALUES",
	"VIEW",
	"WHENEVER",
	"WHERE",
	"WITH",
	"WORK",
	"'('",
	"')'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 11

var yyAct = [...]int{
	4, 7, 5, 10, 11, 9, 6, 3, 2, 1,
	8,
}

var yyPact = [...]int{
	-82, -1000, -1000, -1000, -15, -48, -1000, 0, -1000, -13,
	-1, -1000,
}

var yyPgo = [...]int{
	0, 10, 9, 8, 7, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6,
}

var yyR1 = [...]int{
	0, 2, 6, 8, 8, 9, 9, 10, 10, 11,
	13, 13, 14, 14, 15, 19, 19, 20, 20, 16,
	21, 21, 12, 17, 22, 22, 3, 23, 24, 25,
	26, 27, 27, 28, 28, 30, 31, 4, 5, 29,
	29, 29, 32, 32, 32, 33, 33, 33, 1, 1,
	18, 18, 18, 34, 7,
}

var yyR2 = [...]int{
	0, 1, 5, 0, 1, 1, 2, 1, 1, 6,
	1, 3, 1, 1, 3, 0, 2, 2, 3, 4,
	1, 3, 4, 1, 0, 3, 1, 1, 2, 5,
	4, 1, 3, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 2, 3, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -2, -3, -4, 82, 17, -5, 49, -1, 5,
	16, 5,
}

var yyDef = [...]int{
	0, -2, 1, 26, 0, 0, 37, 0, 38, 48,
	0, 49,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	101, 102, 14, 12, 103, 13, 16, 15,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.statement = NewSelect(yyDollar[3].statement)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = NewFrom(yyDollar[2].str)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
